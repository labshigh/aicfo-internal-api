<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.labshigh.aicfo.internal.api.member.mapper.MemberMapper">
    <select id="count" resultType="int">
        SELECT
        count(uid)
        FROM member m
        WHERE deleted_flag = false AND
        <choose>
            <when test="searchKey != null and searchKey == 'email'">
                email LIKE concat('%', #{searchValue}, '%')
            </when>
            <otherwise>
                1 = 1
            </otherwise>
        </choose>
    </select>
    <select id="list" resultType="com.labshigh.aicfo.internal.api.member.dao.MemberDao">
        SELECT
        uid,
        created_at,
        updated_at,
        deleted_flag,
        used_flag,
        nickname,
        email,
        email_verified_flag,
        phone_number,
        phone_verified_flag,
        email_newsletter_flag,
        password,
        sns_type
        FROM member m
        WHERE deleted_flag = false AND
        <choose>
            <when test="searchKey != null and searchKey == 'email'">
                email LIKE concat('%', #{searchValue}, '%')
            </when>
            <otherwise>
                1 = 1
            </otherwise>
        </choose>
        ORDER BY created_at DESC
        LIMIT #{offsetAndRowCount.offset}, #{offsetAndRowCount.rowCount}
    </select>

    <insert id="insertByEmail" parameterType="com.labshigh.aicfo.internal.api.member.dao.MemberDao" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO member (
                            email
                            ,password
                            ,phone_number
                            ,phone_verified_flag
                            ,terms_of_use
                            ,terms_of_use_dt
                            ,privacy_policy
                            ,privacy_policy_dt
                            ,personal_info_use
                            ,personal_info_use_dt
                            ,user_age_verification
                            ,sns_type
                            )
        VALUES (
                #{email}
                ,#{password}
                ,#{phoneNumber}
                ,#{phoneVerifiedFlag}
                ,#{termsOfUse}
                ,now()
                ,#{privacyPolicy}
                ,now()
                ,#{personalInfoUse}
                ,now()
                ,#{userAgeVerification}
                ,'none'
                )
    </insert>

    <insert id="insertSnsInfo" parameterType="com.labshigh.aicfo.internal.api.member.dao.SnsInfoDao" useGeneratedKeys="true" keyProperty="uid">
        insert into sns_info (
                              member_uid
                             , sns_id
                             , sns_type
                             , sns_name
            ) values (
                      #{memberUid}
                      ,#{snsId}
                      ,#{snsType}
                      ,#{snsName}
                    );
    </insert>

    <select id="get" resultType="com.labshigh.aicfo.internal.api.member.dao.MemberDao">
        SELECT  uid
                ,created_at
                ,updated_at
                ,deleted_flag
                ,used_flag
                ,nickname
                ,email
                ,email_verified_flag
                ,phone_number
                ,phone_verified_flag
                ,password
        FROM member m
        WHERE deleted_flag = false AND
        <choose>
            <when test="uid != null and uid != 0">
                uid = #{uid}
            </when>
            <when test="email != null">
                email = #{email}
            </when>
            <otherwise>
                uid = #{uid}
            </otherwise>
        </choose>
    </select>

    <update id="updateLoginDt">
        UPDATE member
        SET login_dt = now()
        WHERE uid = #{uid}
    </update>

    <select id="getSocialMemberInfo" resultType="com.labshigh.aicfo.internal.api.member.dao.MemberDao">
        SELECT  m.uid AS uid
                ,m.email AS email
                ,m.password  AS password
                ,m.phone_number AS phoneNumber
                ,m.sns_type AS snsType
                ,sns.sns_name AS snsName
                ,sns.sns_profile AS snsProfile
          FROM  aicfo.member m
     LEFT JOIN  aicfo.sns_info sns ON m.uid  = sns.member_uid
         WHERE  m.email = #{email}
    </select>




</mapper>