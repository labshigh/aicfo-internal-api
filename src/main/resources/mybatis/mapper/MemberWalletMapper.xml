<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.labshigh.aicfo.internal.api.wallet.mapper.MemberWalletMapper">
  <insert id="insertMemberWallet" parameterType="com.labshigh.aicfo.internal.api.wallet.dao.MemberWalletDao" useGeneratedKeys="true" keyProperty="uid">
    INSERT INTO member_wallet (coin_id,token_id,address,account_id,member_uid,referrer_code,referrer,balance,mig_eth,mig_staking) VALUES (#{coinId},#{tokenId},#{address},#{accountId},#{memberUid},#{referrerCode},#{referrer},#{balance},#{migEth},#{migStaking})
  </insert>

  <insert id="insertWithdrawalWallet" parameterType="com.labshigh.aicfo.internal.api.wallet.dao.MemberWalletWithdrawalDao" useGeneratedKeys="true" keyProperty="uid">
    INSERT INTO member_wallet_withdrawal (coin_id,token_id,address,name,member_uid,internal_wallet_flag) VALUES (#{coinId},#{tokenId},#{address},#{name},#{memberUid},#{internalWalletFlag})
  </insert>

  <insert id="insertWalletTransaction" parameterType="com.labshigh.aicfo.internal.api.wallet.dao.WalletTransactionDao" useGeneratedKeys="true" keyProperty="uid">
    INSERT INTO wallet_transation
    (
    `transaction_id`,
    `user_id`,
    `token_id`,
    `status`,
    `amount`,
    `fee`,
    `balance`,
    `tx_hash`,
    `memo`,
    `to_user_id`,
    `reg_date`,
    `type`,
    `to_address`,
    `ref_transaction_id`,
    `from_address`,
    `fee_symbol`,
    `fee_token_id`,
    `price_krw`,
    `price_usd`,
    `inner_tx`,
    `member_uid`)
    VALUES
    (#{transactionId},
    #{userId},
    #{tokenId},
    #{status},
    #{amount},
    #{fee},
    #{balance},
    #{txHash},
    #{memo},
    #{toUserId},
    #{regDate},
    #{type},
    #{toAddress},
    #{refTransactionId},
    #{fromAddress},
    #{feeSymbol},
    #{feeTokenId},
    #{priceKrw},
    #{priceUsd},
    #{innerTx},
    #{memberUid});
  </insert>
  <update id="updateWalletBalance">
    UPDATE member_wallet
    SET balance = #{balance}
    WHERE user_id = #{userId}
  </update>

  <update id="updateWalletMigEth">
    UPDATE member_wallet
    SET mig_eth = #{migEth}
    WHERE user_id = #{user_id}
  </update>

  <update id="updateWalletMigStaking">
    UPDATE member_wallet
    SET mig_staking = #{migStaking}
    WHERE user_id = #{user_id}
  </update>

  <update id="updateWalletAddress">
    UPDATE member_wallet
    SET account_id = #{accountId},
        address = #{address},
        user_id = #{userId}
    WHERE uid = #{uid}
  </update>
  <update id="updateMEth">
    UPDATE member_wallet
    SET m_eth = #{mEth}
    WHERE uid = #{uid}
  </update>
  <insert id="deleteWithdrawalWallet" parameterType="com.labshigh.aicfo.internal.api.wallet.dao.MemberWalletWithdrawalDao" useGeneratedKeys="true" keyProperty="uid">
    DELETE
    FROM
        member_wallet_withdrawal
    WHERE
        uid = #{uid}
        AND coin_id = #{coinId}
        AND token_id = #{tokenId}
        AND member_uid= #{memberUid}
  </insert>

  <select id="get" resultType="com.labshigh.aicfo.internal.api.wallet.dao.MemberWalletDao">
    SELECT uid,
           created_at,
           updated_at,
           deleted_flag,
           used_flag,
           coin_id,
           token_id,
           address,
           member_uid,
           referrer_code,
           referrer,
           m_eth,
           balance,
           user_id,
           referrer,
           mig_eth,
           mig_staking
    FROM member_wallet m
    WHERE deleted_flag = false
    <if test="memberUid != null and memberUid > 0">
      AND member_uid = #{memberUid}
    </if>
    <if test="coinId != null and coinId > 0">
      AND coin_id = #{coinId}
    </if>
    <if test="tokenId != null and tokenId > 0">
      AND token_id = #{tokenId}
    </if>
    <if test="referrerCode != null">
      AND referrer_code = #{referrerCode}
    </if>
    <if test="uid != null and uid > 0">
      AND uid = #{uid}
    </if>
    <if test="userId != null">
      AND user_id = #{userId}
    </if>
    <if test="address != null">
      AND address = #{address}
    </if>
  </select>

  <select id="getAdminMemberWallet" resultType="com.labshigh.aicfo.internal.api.wallet.dao.MemberWalletAdminDao" >
    SELECT mw.uid,
           mw.created_at,
           mw.updated_at,
           mw.deleted_flag,
           mw.used_flag,
           mw.coin_id,
           mw.token_id,
           mw.address,
           mw.member_uid,
           mw.referrer_code,
           mw.referrer,
           mw.m_eth,
           mw.balance,
           mw.user_id,
           mw.referrer,
           mw.mig_eth,
           mw.mig_staking,
           m.email,
           m.email_verified_flag,
           m.nickname
    FROM member_wallet mw LEFT OUTER JOIN member m ON mw.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag = true
    WHERE mw.deleted_flag = false AND
          mw.used_flag = true
          <if test="searchType.name() == 'ADDRESS'">
            AND mw.address = #{search}
          </if>
          <if test="searchType.name() == 'EMAIL'">
            AND m.email = #{search}
          </if>
  </select>
  <select id="getAdminTotalMemberWalletBalance" resultType="com.labshigh.aicfo.internal.api.wallet.dao.MemberWalletAdminTotalBalanceDao">
    SELECT SUM(mw.balance) AS total_balance
    FROM member_wallet mw INNER JOIN member m on mw.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag = true
    WHERE mw.deleted_flag = false AND mw.used_flag = true
  </select>


  <select id="getList" resultType="com.labshigh.aicfo.internal.api.wallet.dao.MemberWalletDao">
    SELECT uid,
    created_at,
    updated_at,
    deleted_flag,
    used_flag,
    coin_id,
    token_id,
    address,
    member_uid,
    referrer_code,
    m_eth,
    referrer
    FROM member_wallet m
    WHERE deleted_flag = false
    <if test="memberUid != null and memberUid > 0">
      AND member_uid = #{memberUid}
    </if>
    <if test="coinId != null and coinId > 0">
      AND coin_id = #{coinId}
    </if>
    <if test="tokenId != null and tokenId > 0">
      AND token_id = #{tokenId}
    </if>
    <if test="referrerCode != null">
      AND referrer_code = #{referrerCode}
    </if>
    ORDER BY created_at ASC
  </select>

  <select id="getWithdrawalWallet" resultType="com.labshigh.aicfo.internal.api.wallet.dao.MemberWalletWithdrawalDao">
    SELECT uid,
    created_at,
    updated_at,
    deleted_flag,
    used_flag,
    coin_id,
    token_id,
    address,
    name,
    member_uid,
    internal_wallet_flag
    FROM member_wallet_withdrawal m
    WHERE deleted_flag = false
    <if test="memberUid != null and memberUid > 0">
      AND member_uid = #{memberUid}
    </if>
    <if test="coinId != null and coinId > 0">
      AND coin_id = #{coinId}
    </if>
    <if test="tokenId != null and tokenId > 0">
      AND token_id = #{tokenId}
    </if>
    <if test="address != null ">
      AND address = #{address}
    </if>
    ORDER BY created_at DESC
  </select>

  <select id="getWithdrawalWalletList" resultType="com.labshigh.aicfo.internal.api.wallet.dao.MemberWalletWithdrawalDao">
    SELECT uid,
    created_at,
    updated_at,
    deleted_flag,
    used_flag,
    coin_id,
    token_id,
    token_id,
    address,
    name,
    member_uid,
    internal_wallet_flag
    FROM member_wallet_withdrawal m
    WHERE deleted_flag = false
    AND member_uid = #{memberUid}
    <if test="keyword != null ">
      AND( address like CONCAT('%',#{keyword},'%')
      OR name like CONCAT('%',#{keyword},'%'))
    </if>
    ORDER BY created_at DESC
  </select>
  <update id="updateReferrer">
    UPDATE member_wallet SET referrer = #{referrer}
    WHERE deleted_flag = false AND
      uid = #{uid} AND
      member_uid = #{memberUid}
  </update>

  <select id="withdrawalHistory" resultType="com.labshigh.aicfo.internal.api.wallet.model.response.MemberWalletWithdrawalHistory">
    <![CDATA[
    SELECT  *
      FROM  (
              SELECT  wr.created_at AS requestAt
                   ,wr.request_quantity AS requestQuantity
                   ,CASE
                      WHEN wr.status IS NULL
                        THEN 'ing'
                      WHEN wr.status IS NOT NULL AND wr.status = FALSE
                        THEN 'reject'
                      WHEN wr.status IS NOT NULL AND wr.status = TRUE AND wr.schedule_status IS NULL
                        THEN 'ing'
                      WHEN wr.status IS NOT NULL AND wr.status = TRUE AND wr.schedule_status = TRUE
                        THEN 'complete'
                END AS requestStatus
                   ,wr.uid AS uid
                   ,wr.deleted_flag
                   ,wr.status_memo AS rejectMemo
              FROM  withdraw_request wr
                      LEFT JOIN  member_wallet_withdrawal mww on wr.member_wallet_withdrawal_uid = mww.uid
              WHERE  1=1
                AND  IFNULL(wr.deleted_flag, FALSE) = FALSE
                AND  wr.member_uid  = #{memberUid}
                AND  wr.to_wallet = #{address}
                AND  mww.uid IS NOT NULL
                AND  wr.uid IS NOT NULL
              ORDER BY  wr.uid DESC
            ) t1
    WHERE  t1.requestStatus != 'complete'
     LIMIT  0,1
    ]]>
  </select>
</mapper>