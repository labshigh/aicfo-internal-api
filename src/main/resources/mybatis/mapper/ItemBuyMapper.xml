<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.labshigh.aicfo.internal.api.marketItem.mapper.ItemBuyMapper">
  <insert id="insert" keyProperty="uid" parameterType="com.labshigh.aicfo.internal.api.marketItem.dao.ItemBuyDao" useGeneratedKeys="true">
    INSERT INTO item_buy (item_uid, market_item_uid, price, member_uid,price_unit,user_id
                         ,referrer)
    VALUES (#{itemUid}, #{marketItemUid}, #{price}, #{memberUid},#{priceUnit}, #{userId}
            ,(
                SELECT referrer
                FROM member_wallet mw
                where mw.used_flag = true AND
                      mw.deleted_flag = false AND
                      mw.user_id = #{userId} AND
                      #{priceUnit} = 'ETH')
            )
  </insert>

  <select id="list" resultType="com.labshigh.aicfo.internal.api.marketItem.dao.ItemBuyDetailDao">
    SELECT *
    FROM (
      SELECT ib.uid,
      ib.created_at,
      ib.updated_at,
      ib.deleted_flag,
      ib.used_flag,
      ib.member_uid,
      ib.price,
      (ib.price * 1) * (krw.last * 1)  as krw_price,
      (ib.price * 1) * (( i.interest * 1) / 100)  AS interest_price,
      (ib.price * 1) * (( i.interest * 1) / 100) * (krw.last * 1)  AS krw_interest_price,
      i.start_at,
      i.end_at,
      i.interest,
      i.round,
      i.close_round,
      i.request_end_at,
      i.min_price,
      i.withdrawal_request_end_at,
      krw.last AS krw_eth,
      ib.price_unit,
      ib.item_uid,
      DATEDIFF(NOW(), i.withdrawal_request_end_at) AS remaining_days,
      ib.user_id
      FROM item_buy ib LEFT OUTER JOIN item i on ib.item_uid = i.uid
      LEFT OUTER JOIN exchange_virtual krw on krw.name = 'ETH-KRW'
      WHERE ib.deleted_flag = false AND
            ib.used_flag = true AND
          ib.member_uid = #{memberUid} AND
          ib.user_id = #{userId}
          <if test="uid > 0">
            AND ib.uid = #{uid}
          </if>
          <if test="itemUid > 0">
            AND i.uid = #{itemUid}
          </if>
    ) RS
    WHERE 1 = 1
      <if test = "processStatus == 1"> /* 준비 */
        AND NOW() <![CDATA[ < ]]> start_at
      </if>

    <if test = "processStatus == 2"> /* 진행중 */
      AND NOW() BETWEEN start_at AND end_at
    </if>

    <if test = "processStatus == 3"> /* 완료 */
      AND (NOW() > end_at OR remaining_days >= -7)
    </if>

    <if test = "processStatus == 4"> /* 출금 요청 데이터 */
      AND NOW() BETWEEN start_at AND withdrawal_request_end_at
    </if>

      <if test="startAt != null and endAt != null">
        AND end_at BETWEEN #{startAt} AND #{endAt}
      </if>

    <if test="year != null">
      AND (DATE_FORMAT(start_at, '%Y') = #{year} OR DATE_FORMAT(end_at, '%Y') = #{year} )
    </if>
    ORDER BY RS.created_at DESC
</select>

  <select id="adminBuyList" resultType="com.labshigh.aicfo.internal.api.marketItem.dao.ItemBuyAdminListDao">
    SELECT rs.uid, rs.round, rs.start_at, rs.end_at, rs.request_end_at, rs.close_round, rs.month ,
           SUM(rs.interest_price) AS interest_price,
           SUM(rs.buy_eth_total_price) AS buy_eth_total_price,
           SUM(rs.buy_meth_total_price) AS buy_meth_total_price,
           /*SUM(rs.count_eth_buy) AS count_eth_buy,*/
           (SELECT COUNT(DISTINCT user_id) FROM item_buy where item_uid = rs.uid AND price_unit = 'ETH' AND used_flag= true AND deleted_flag = false ) AS count_eth_buy,
           SUM(rs.count_meth_buy) AS count_meth_buy,
           SUM(rs.count_auto_proc) AS count_auto_proc1,
           SUM(rs.count_request) AS count_request,
           /*SUM(rs.count_request) AS count_total,*/
           (SELECT COUNT(DISTINCT user_id) FROM item_buy where item_uid = rs.uid AND used_flag= true AND deleted_flag = false ) AS count_total,
           IF(rs.uid = (SELECT si.uid FROM item si WHERE si.request_end_at > NOW() AND DATE_FORMAT(si.start_at, '%Y') = DATE_FORMAT(NOW(), '%Y') ORDER BY si.start_at limit 1) ,true ,false) AS proc_flag,
           (SELECT COUNT(DISTINCT ibs.user_id) FROM item_buy_settlement ibs WHERE rs.uid = ibs.item_uid AND type  = 'DEPOSIT' AND ibs.used_flag = true AND ibs.deleted_flag = false) AS count_deposit,
           (SELECT COUNT(*) FROM item_buy_settlement ibs WHERE rs.uid = ibs.item_uid AND type  = 'WITHDRAWAL' AND ibs.used_flag = true AND ibs.deleted_flag = false) AS count_withdrawal ,
           (SELECT COUNT(DISTINCT sib.user_id) FROM item_buy sib WHERE sib.used_flag = true AND sib.deleted_flag = false AND sib.auto_progress_flag = true AND sib.item_uid = rs.uid ) count_auto_proc

    FROM (
          SELECT i.uid,
                 i.round,
                 i.start_at,
                 i.end_at,
                 i.request_end_at,
                 i.close_round,
                 CAST(DATE_FORMAT(start_at, '%m') AS unsigned) AS month,
                 IFNULL(ib.price, 0) * (i.interest / 100) AS interest_price,
                 IFNULL(IF(ib.price_unit = 'ETH', ib.price , 0), 0) AS buy_eth_total_price,
                 IFNULL(IF(ib.price_unit = 'mETH', ib.price , 0), 0) AS buy_meth_total_price,
                 /*IFNULL(IF( ib.price_unit = 'ETH' , 1,0 ),0) AS count_eth_buy,*/
                 IFNULL(IF( ib.price_unit = 'mETH' , 1,0 ),0) AS count_meth_buy,
                 IF(ib.uid IS NULL, 0 , 1) AS count_request,
                 IF(ib.auto_progress_flag = true, 1, 0) count_auto_proc

          FROM item i LEFT OUTER JOIN item_buy ib on i.uid = ib.item_uid
          WHERE (ib.uid IS NUlL OR
                 ib.deleted_flag = false AND
                 ib.used_flag = true ) AND
                  i.used_flag = true AND
                  i.deleted_flag = false AND
                 /*i.item_kind = 1 AND*/
                 i.vip_flag = #{vipFlag} AND
                DATE_FORMAT(i.start_at, '%Y') = #{year}
         ) rs
    GROUP BY rs.uid, rs.round, rs.start_at, rs.end_at, rs.close_round
    ORDER BY rs.start_at

  </select>

  <select id="selectAdminBuyStatistics" resultType="com.labshigh.aicfo.internal.api.marketItem.dao.ItemBuyAdminStatisticsDao" >
    SELECT rs.uid, rs.round, rs.start_at, rs.end_at, rs.request_end_at, rs.close_round, rs.month ,
           SUM(rs.interest_price) AS interest_price,
           SUM(rs.buy_eth_total_price) AS buy_eth_total_price,
           SUM(rs.buy_meth_total_price) AS buy_meth_total_price,
           (SELECT COUNT(DISTINCT user_id) FROM item_buy where item_uid = rs.uid AND price_unit = 'ETH' AND used_flag= true AND deleted_flag = false ) AS count_eth_buy,
           SUM(rs.count_meth_buy) AS count_meth_buy,
           SUM(rs.count_auto_proc) AS count_auto_proc1,
           SUM(rs.count_request) AS count_request,
           (SELECT COUNT(DISTINCT user_id) FROM item_buy where item_uid = rs.uid AND used_flag= true AND deleted_flag = false ) AS count_total,
           IF(rs.uid = (SELECT si.uid FROM item si WHERE si.request_end_at > NOW() AND DATE_FORMAT(si.start_at, '%Y') = DATE_FORMAT(NOW(), '%Y') ORDER BY si.start_at limit 1) ,true ,false) AS proc_flag,
           (SELECT COUNT(DISTINCT ibs.user_id) FROM item_buy_settlement ibs WHERE rs.uid = ibs.item_uid AND type  = 'DEPOSIT' AND ibs.used_flag = true AND ibs.deleted_flag = false) AS count_deposit,
           (SELECT COUNT(*) FROM item_buy_settlement ibs WHERE rs.uid = ibs.item_uid AND type  = 'WITHDRAWAL' AND ibs.used_flag = true AND ibs.deleted_flag = false) AS count_withdrawal ,
           (SELECT COUNT(DISTINCT sib.user_id) FROM item_buy sib WHERE sib.used_flag = true AND sib.deleted_flag = false AND sib.auto_progress_flag = true AND sib.item_uid = rs.uid ) AS count_auto_proc,
           rs.referrer_price
    FROM (
           SELECT i.uid,
                  i.round,
                  i.start_at,
                  i.end_at,
                  i.request_end_at,
                  i.close_round,
                  CAST(DATE_FORMAT(start_at, '%m') AS unsigned) AS month,
                  IFNULL(ib.price, 0) * (i.interest / 100) AS interest_price,
                  IFNULL(IF(ib.price_unit = 'ETH', ib.price , 0), 0) AS buy_eth_total_price,
                  IFNULL(IF(ib.price_unit = 'mETH', ib.price , 0), 0) AS buy_meth_total_price,
                  IFNULL(IF( ib.price_unit = 'mETH' , 1,0 ),0) AS count_meth_buy,
                  IF(ib.uid IS NULL, 0 , 1) AS count_request,
                  IF(ib.auto_progress_flag = true, 1, 0) count_auto_proc,
                  IFNULL(th.referrer_price ,0) AS referrer_price
           FROM item i LEFT OUTER JOIN item_buy ib on i.uid = ib.item_uid
                LEFT OUTER JOIN (
                    SELECT th.transaction_uid AS item_uid , SUM(th.price) AS referrer_price
                    FROM transaction_history th
                    WHERE th.transaction_kind_uid = '23' AND th.used_flag = true AND th.deleted_flag = false
                    GROUP BY th.transaction_uid
                ) AS th ON th.item_uid = i.uid
           WHERE (ib.uid IS NUlL OR
                  ib.deleted_flag = false AND
                  ib.used_flag = true ) AND
             i.used_flag = true AND
             i.deleted_flag = false AND
             i.vip_flag = #{vipFlag} AND
             NOW() > i.end_at
         ) rs
    GROUP BY rs.uid, rs.round, rs.start_at, rs.end_at, rs.close_round, rs.referrer_price
    ORDER BY rs.start_at DESC
    LIMIT #{offsetAndRowCount.offset}, #{offsetAndRowCount.rowCount}
  </select>
  <select id="countAdminBuyStatistics" resultType="int" >
    SELECT COUNT(*)
    FROM (
       SELECT rs.uid, rs.round, rs.start_at, rs.end_at, rs.request_end_at, rs.close_round, rs.month
       FROM (
             SELECT i.uid,
                    i.round,
                    i.start_at,
                    i.end_at,
                    i.request_end_at,
                    i.close_round,
                    CAST(DATE_FORMAT(start_at, '%m') AS unsigned) AS month,
                    IFNULL(th.referrer_price ,0) AS referrer_price
             FROM item i LEFT OUTER JOIN item_buy ib on i.uid = ib.item_uid
                         LEFT OUTER JOIN (
                           SELECT th.transaction_uid AS item_uid , SUM(th.price) AS referrer_price
                           FROM transaction_history th
                           WHERE th.transaction_kind_uid = '23' AND th.used_flag = true AND th.deleted_flag = false
                           GROUP BY th.transaction_uid
                         ) AS th ON th.item_uid = i.uid
             WHERE (ib.uid IS NUlL OR
                    ib.deleted_flag = false AND
                    ib.used_flag = true ) AND
               i.used_flag = true AND
               i.deleted_flag = false AND
               i.vip_flag = #{vipFlag} AND
               NOW() > i.end_at
           ) rs
      GROUP BY rs.uid, rs.round, rs.start_at, rs.end_at, rs.close_round, rs.referrer_price
    ) AS cntRs

  </select>


  <select id="adminBuyDetailList" resultType="com.labshigh.aicfo.internal.api.marketItem.dao.ItemBuyAdminDetailListDao">
    SELECT ib.item_uid,
           ib.member_uid,
           mw.user_id AS email,
           SUM(ib.price) AS total_price,
           IF(ib.auto_progress_flag = true,'[자동]' ,CONCAT('[', COUNT(*) , ']') ) AS request_count,
           ib.auto_progress_flag,
           IF(ib.auto_progress_flag = true,'자동 입금' ,'입금') AS status
    FROM item_buy ib LEFT OUTER JOIN member_wallet mw ON ib.user_id = mw.user_id AND mw.used_flag = true AND mw.deleted_flag = false
    WHERE ib.used_flag = true AND
          ib.deleted_flag = false AND
          ib.item_uid = #{itemUid} AND
          ib.price_unit = #{priceUnit}
          <if test="search != null and search != ''">
            AND ib.user_id LIKE CONCAT('%',#{search},'%')
          </if>
    GROUP BY ib.item_uid, ib.member_uid, mw.user_id, ib.auto_progress_flag, status
    LIMIT #{offsetAndRowCount.offset}, #{offsetAndRowCount.rowCount}
  </select>

  <select id="countAdminBuyDetail" resultType="int">
    SELECT COUNT(*)
    FROM (SELECT ib.item_uid,
                 ib.member_uid,
                 mw.user_id,
                 ib.auto_progress_flag
          FROM item_buy ib
                 LEFT OUTER JOIN member_wallet mw ON ib.user_id = mw.user_id AND mw.used_flag = true AND mw.deleted_flag = false
          WHERE ib.used_flag = true
            AND ib.deleted_flag = false
            AND ib.item_uid = #{itemUid} AND
            ib.price_unit = #{priceUnit}
            <if test="search != null and search != ''">
              AND ib.user_id LIKE CONCAT('%',#{search},'%')
            </if>
          GROUP BY ib.item_uid, ib.member_uid, mw.user_id, ib.auto_progress_flag) as rs
  </select>

  <select id="adminBuyWithdrawalRequestList" resultType="com.labshigh.aicfo.internal.api.marketItem.dao.ItemBuyAdminBuyWithdrawalRequestDao">
    SELECT DISTINCT
           ib.item_uid,
           ibs.uid AS item_buy_settlement_uid,
           ib.member_uid,
           mw.user_id AS email,
           ibs.created_at AS withdrawal_request_at,
            SUM(ib.price) AS price,
            SUM(ib.price) * (i.interest / 100) AS interest_price,
           i.round,
           ibs.withdrawal_approval_flag,
           ibs.withdrawal_completed_flag,
           ibs.price AS withdrawal_price,

           ibs.withdrawal_approval_at

           <if test="type == 'DEPOSIT'">
            ,(SELECT COUNT(distinct cib.item_uid) FROM item_buy cib LEFT OUTER JOIN item ci ON cib.item_uid = ci.uid WHERE cib.user_id = ib.user_id AND cib.auto_progress_flag = true AND DATE_FORMAT(ci.start_at, '%Y') = #{year} ) AS auto_count
           </if>
    FROM item_buy ib LEFT OUTER JOIN (
          SELECT MAX(uid) AS uid,  user_id, item_uid, MAX(created_at) AS created_at ,
          withdrawal_approval_flag, withdrawal_completed_flag,
          SUM(price) AS price, withdrawal_approval_at
          FROM  item_buy_settlement
          WHERE type = #{type} AND used_flag = true AND deleted_flag = false
          GROUP BY user_id , item_uid ,  withdrawal_approval_flag, withdrawal_completed_flag, withdrawal_approval_at
        ) ibs ON ib.item_uid = ibs.item_uid AND ib.user_id = ibs.user_id
                     LEFT OUTER JOIN member_wallet mw ON ib.user_id = mw.user_id AND mw.used_flag = true AND mw.deleted_flag = false
                     LEFT OUTER JOIN item i on ib.item_uid = i.uid AND i.deleted_flag = false AND  i.used_flag = true
    WHERE ib.used_flag = true AND
      ib.deleted_flag = false AND
      ib.item_uid = #{itemUid}  AND ibs.uid is not null
    GROUP BY ib.item_uid, ibs.uid, ib.member_uid, ib.user_id , ibs.created_at ,ibs.price ,i.round , ibs.withdrawal_approval_flag, ibs.withdrawal_completed_flag, ibs.withdrawal_approval_at

    LIMIT #{offsetAndRowCount.offset}, #{offsetAndRowCount.rowCount}
  </select>

  <select id="countAdminBuyWithdrawalRequestList" resultType="int">
    SELECT COUNT( DISTINCT ib.user_id)
          FROM item_buy ib LEFT OUTER JOIN (
            SELECT MAX(uid) AS uid,  user_id, item_uid, MAX(created_at) AS created_at ,
                   withdrawal_approval_flag, withdrawal_completed_flag,
                   SUM(price) AS price, withdrawal_approval_at
            FROM  item_buy_settlement
            WHERE type = #{type} AND used_flag = true AND deleted_flag = false
            GROUP BY user_id , item_uid ,  withdrawal_approval_flag, withdrawal_completed_flag, withdrawal_approval_at
          ) ibs ON ib.item_uid = ibs.item_uid AND ib.user_id = ibs.user_id
                           LEFT OUTER JOIN member_wallet mw ON ib.user_id = mw.user_id AND mw.used_flag = true AND mw.deleted_flag = false
                           LEFT OUTER JOIN item i on ib.item_uid = i.uid AND i.deleted_flag = false AND  i.used_flag = true
    WHERE ib.used_flag = true AND
      ib.deleted_flag = false AND
      ib.item_uid = #{itemUid}
      AND ibs.uid is not null

  </select>


  <select id="adminBuyDetailListByMember" resultType="com.labshigh.aicfo.internal.api.marketItem.dao.ItemBuyAdminDetailListByMemberDao" >
    SELECT
        /*ib.uid, */
        ib.item_uid,
        mw.user_id AS email,
        <if test="autoProgressFlag == null or autoProgressFlag == false">
          ib.created_at,
          ib.price,
          ib.price + IFNULL(ibs.deposit_price, 0) + IFNULL(ibs.withdrawal_price,0) + (ib.price * (i.interest / 100)) AS request_price,
          ib.price * (i.interest / 100) AS interest_price,
        </if>
        <if test="autoProgressFlag == true">
          max(ib.created_at) AS created_at,
          SUM(ib.price) AS price,
          SUM(ib.price)+ IFNULL(ibs.deposit_price, 0) + IFNULL(ibs.withdrawal_price,0) + (SUM(ib.price) * (i.interest / 100)) AS request_price,
          SUM(ib.price) * (i.interest / 100) AS interest_price,
        </if>


        IFNULL(ibs.deposit_price,0) AS deposit_price,
        IFNULL(ibs.withdrawal_price,0) AS withdrawal_price,
        i.round,
        IF(ib.auto_progress_flag = true,IF(i.round - 1 <![CDATA[<]]> 1, 36, i.round - 1 ),null) AS
        prev_round,
        /*IF(ib.auto_progress_flag = true,IF(i.close_round + 1 > 36 , i.close_round + 1 - 36 ,
        i.close_round + 1), null) AS auto_round,*/
        i.close_round AS auto_round,
        ib.auto_progress_flag
    FROM item_buy ib LEFT OUTER JOIN item i on ib.item_uid = i.uid AND i.deleted_flag = false AND
    i.used_flag = true
    LEFT OUTER JOIN member_wallet mw on ib.user_id = mw.user_id AND mw.deleted_flag = false AND
    mw.used_flag = true
    LEFT OUTER JOIN
    (   SELECT item_uid, user_id,
               SUM(IF( type = 'DEPOSIT', price * 1 , 0)) AS deposit_price,
               SUM(IF( type = 'WITHDRAWAL' and withdrawal_approval_flag = true , price * -1 , 0)) AS withdrawal_price
        FROM item_buy_settlement
        GROUP BY item_uid, user_id
    ) ibs on ib.item_uid = ibs.item_uid AND ib.user_id = ibs.user_id
    WHERE ib.used_flag = true AND
        ib.deleted_flag = false AND
        ib.item_uid = #{itemUid}
        AND ib.price_unit = #{priceUnit}
    <if test="autoProgressFlag != null">
            AND ib.auto_progress_flag = #{autoProgressFlag}
    </if>
    <if test="memberUid > 0">
      AND ib.member_uid = #{memberUid}
    </if>
    <if test="userId != ''">
      AND ib.user_id = #{userId}
    </if>
    <if test="autoProgressFlag == true">
        GROUP BY ib.item_uid, i.round,  mw.user_id , ibs.deposit_price, ibs.withdrawal_price , i.interest
    </if>
    <if test="memberUid == 0">
      LIMIT #{offsetAndRowCount.offset}, #{offsetAndRowCount.rowCount}
    </if>
  </select>

  <select id="countAdminBuyDetailListByMember" resultType="int" >
    SELECT COUNT(distinct ib.user_id)
    FROM item_buy ib LEFT OUTER JOIN item i on ib.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag = true
    WHERE ib.used_flag = true AND
          ib.deleted_flag = false AND
          ib.item_uid = #{itemUid}
          AND ib.price_unit = #{priceUnit}
    <if test="autoProgressFlag != null">
      AND ib.auto_progress_flag = #{autoProgressFlag}
    </if>
    <if test="memberUid > 0">
      AND ib.member_uid = #{memberUid}
    </if>
    <if test="userId != ''">
      AND ib.user_id = #{userId}
    </if>
  </select>

  <select id="adminBuySettlementList" resultType="com.labshigh.aicfo.internal.api.marketItem.dao.ItemBuyAdminBuySettlementListDao" >
    SELECT
    ib.item_uid,
    mw.user_id AS email,
    SUM(ib.price) AS price,
    SUM(ib.price) * (i.interest / 100) AS interest_price,
    IFNULL(SUM(CAST(th.price AS decimal(10,3))),0) AS referrer_price

    FROM item_buy ib LEFT OUTER JOIN item i on ib.item_uid = i.uid AND i.deleted_flag = false AND
    i.used_flag = true
    LEFT OUTER JOIN member_wallet mw on ib.user_id = mw.user_id AND mw.deleted_flag = false AND
    mw.used_flag = true
    LEFT OUTER JOIN transaction_history th on ib.item_uid = th.transaction_uid  AND ib.user_id = th.user_id
                    AND th.transaction_kind_uid = '23' AND th.used_flag = true AND th.deleted_flag = false

    WHERE ib.used_flag = true AND
    ib.deleted_flag = false AND
    ib.item_uid = #{itemUid}
    AND ib.price_unit = #{priceUnit}
    GROUP BY ib.item_uid, mw.user_id

    LIMIT #{offsetAndRowCount.offset}, #{offsetAndRowCount.rowCount}

  </select>

  <select id="countAdminBuySettlement" resultType="int">
    SELECT COUNT(DISTINCT ib.user_id)
    FROM item_buy ib LEFT OUTER JOIN item i on ib.item_uid = i.uid AND i.deleted_flag = false AND
                                               i.used_flag = true
                     LEFT OUTER JOIN member_wallet mw on ib.user_id = mw.user_id AND mw.deleted_flag = false AND
                                                         mw.used_flag = true
                     LEFT OUTER JOIN transaction_history th on ib.item_uid = th.transaction_uid  AND ib.user_id = th.user_id
      AND th.transaction_kind_uid = '23' AND th.used_flag = true AND th.deleted_flag = false

    WHERE ib.used_flag = true AND
      ib.deleted_flag = false AND
      ib.item_uid = #{itemUid}
      AND ib.price_unit = #{priceUnit}

  </select>



  <select id="selectItemBuyCurPriceInfo" resultType="com.labshigh.aicfo.internal.api.marketItem.dao.ItemBuyCurPriceInfoDao">
    SELECT IFNULL(SUM(IF(ib.price_unit = 'ETH' , ib.price * 1, 0)), 0) AS total_eth_price,
           IFNULL(SUM(IF(ib.price_unit = 'mETH' , ib.price * 1, 0)), 0) AS total_meth_price,
           IFNULL(SUM((ib.price * 1) * (i.interest / 100) ), 0) AS total_interest_price,
           IFNULL(SUM(ibs.deposit_price * 1) , 0) AS deposit_price,
           (SELECT IFNULL(SUM(IF(ssib.price_unit = 'ETH' , ssib.price * 1, 0)),0) AS wait_price FROM aicfo.item ssi INNER JOIN item_buy ssib ON ssi.uid = ssib.item_uid WHERE NOW() <![CDATA[ < ]]> ssi.start_at AND ssib.user_id = #{userId} ORDER BY ssi.start_at limit 1 ) AS wait_price
    FROM item_buy ib LEFT OUTER JOIN item i on ib.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag = true
                     LEFT OUTER JOIN (
                      SELECT ibs.item_uid, ibs.user_id , SUM(ibs.price) AS deposit_price
                      FROM item_buy_settlement ibs INNER JOIN item si  ON ibs.item_uid = si.uid
                      WHERE NOW() BETWEEN si.start_at AND si.withdrawal_request_end_at AND ibs.type = 'DEPOSIT' AND ibs.deleted_flag = false AND ibs.used_flag = true
                      GROUP BY ibs.item_uid, ibs.user_id
                     ) ibs ON ibs.item_uid = ib.item_uid AND ibs.user_id = ib.user_id
    WHERE ib.deleted_flag = false AND
          ib.used_flag = true AND
          NOW() BETWEEN i.start_at and i.end_at AND
          ib.member_uid = #{memberUid} AND
          ib.user_id = #{userId}

  </select>

  <select id="selectItemBuyCurWaitPrice" resultType="com.labshigh.aicfo.internal.api.marketItem.dao.ItemBuyCurPriceInfoDao">
    SELECT IFNULL(SUM(IF(ssib.price_unit = 'ETH' , ssib.price * 1, 0)),0) AS wait_price
    FROM aicfo.item ssi INNER JOIN item_buy ssib ON ssi.uid = ssib.item_uid
    WHERE ssi.used_flag = true AND ssi.deleted_flag = false AND NOW() <![CDATA[ < ]]> ssi.start_at AND ssib.user_id = #{userId}
    ORDER BY ssi.start_at limit 1

  </select>

</mapper>
